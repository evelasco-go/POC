trigger:
  branches:
    include:
      - dev  # Replace with your branch name

variables:
  AZURE_CLIENT_ID: $(azure_client_id)  # Set these values in the Azure DevOps pipeline variables or environment
  AZURE_CLIENT_SECRET: $(azure_client_secret)
  AZURE_TENANT_ID: $(azure_tenant_id)
  AZURE_SUBSCRIPTION_ID: $(azure_subscription_id)
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
  RESOURCE_GROUP_NAME: "POCMyResourceGroup"
  STORAGE_ACCOUNT_NAME: "pocmystorageacct123"
  CONTAINER_NAME: "tfstate"
  AKS_NAME: "MyAKSCluster"
  LOCATION: "East US"
  NODE_COUNT: 2

stages:
  - stage: CreateResources
    displayName: "Create Azure Resources"
    jobs:
      - job: CreateAzureResources
        displayName: "Create Resource Group and Storage Account"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'  # The Azure subscription to use
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create Resource Group
                az group create --name ${{ variables.RESOURCE_GROUP_NAME }} --location "East US"

                # Create Storage Account with a valid name (must be lowercase and between 3-24 characters)
                az storage account create \
                  --name ${{ variables.STORAGE_ACCOUNT_NAME }} \
                  --resource-group ${{ variables.RESOURCE_GROUP_NAME }} \
                  --location "East US" \
                  --sku Standard_LRS

                # Create a container to store Terraform state
                az storage container create \
                  --name ${{ variables.CONTAINER_NAME }} \
                  --account-name ${{ variables.STORAGE_ACCOUNT_NAME }}

  - stage: TerraformInit
    displayName: "Initialize Terraform"
    jobs:
      - job: TerraformInitJob
        displayName: "Terraform Init"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'  # The Azure subscription to use
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Authenticate using the Service Principal
                az login --service-principal -u ${{ variables.AZURE_CLIENT_ID }} -p ${{ variables.AZURE_CLIENT_SECRET }} --tenant ${{ variables.AZURE_TENANT_ID }}
                
                # Initialize Terraform
                terraform init -reconfigure  # Reconfigure the backend

  - stage: TerraformPlan
    displayName: "Plan Infrastructure"
    jobs:
      - job: TerraformPlanJob
        displayName: "Run Terraform Plan"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'  # The Azure subscription to use
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Authenticate using the Service Principal
                az login --service-principal -u ${{ variables.AZURE_CLIENT_ID }} -p ${{ variables.AZURE_CLIENT_SECRET }} --tenant ${{ variables.AZURE_TENANT_ID }}

                # Run Terraform Plan
                terraform plan -out=tfplan

                # Upload the plan as an artifact
                echo "Uploading plan artifact..."
                echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]tfplan"

  - stage: TerraformApply
    displayName: "Apply Infrastructure"
    dependsOn: TerraformPlan
    condition: succeeded()
    jobs:
      - deployment: TerraformApplyJob
        displayName: "Run Terraform Apply"
        environment: "ManualApproval"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: tfplan
                  artifact: tfplan
                  displayName: "Download Plan Artifact"

                - task: AzureCLI@2
                  inputs:
                    azureSubscription: '$(azure_subscription)'  # The Azure subscription to use
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Authenticate using the Service Principal
                      az login --service-principal -u ${{ variables.AZURE_CLIENT_ID }} -p ${{ variables.AZURE_CLIENT_SECRET }} --tenant ${{ variables.AZURE_TENANT_ID }}

                      # Apply the Terraform plan
                      terraform apply -auto-approve tfplan
