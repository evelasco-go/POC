trigger:
  branches:
    include:
      - dev  # Replace with your branch name

variables:
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
  RESOURCE_GROUP_NAME: "POCMyResourceGroup"
  STORAGE_ACCOUNT_NAME: "pocmystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "eastus"  # Corrected location format
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"
  # Hardcoded values for debugging
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'

stages:

  # Stage 1: Create Azure Resources
  - stage: CreateResources
    displayName: "Create Azure Resources"
    jobs:
      - job: CreateAzureResources
        displayName: "Create Resource Group and Storage Account"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az group create --name $(RESOURCE_GROUP_NAME) --location $(LOCATION)
                az storage account create \
                  --name $(STORAGE_ACCOUNT_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --location $(LOCATION) \
                  --sku Standard_LRS
                az storage container create \
                  --name $(CONTAINER_NAME) \
                  --account-name $(STORAGE_ACCOUNT_NAME)

  # Stage 2: Terraform Init, Cleanup Lock File and Plan
  - stage: TerraformInitAndPlan
    displayName: "Initialize and Plan Terraform"
    dependsOn: CreateResources
    jobs:
      - job: TerraformInitAndPlanJob
        displayName: "Terraform Init and Plan"
        steps:
          # Step 1: Install Terraform
          - script: |
              echo "Installing Terraform..."
              curl -LO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
              unzip terraform_1.5.7_linux_amd64.zip
              sudo mv terraform /usr/local/bin/
              terraform version
            displayName: "Install Terraform"

          # Step 2: Cleanup .terraform.lock.hcl
          - script: |
              cd $(System.DefaultWorkingDirectory)
              if [ -f ".terraform.lock.hcl" ]; then
                echo "Removing .terraform.lock.hcl"
                rm -f .terraform.lock.hcl
              else
                echo ".terraform.lock.hcl not found, skipping."
              fi
            displayName: "Remove Terraform Lock File"

          # Step 3: Initialize Terraform and Plan
          - script: |
              cd $(System.DefaultWorkingDirectory)
              export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
              export ARM_TENANT_ID=$(AZURE_TENANT_ID)
              export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
              terraform init -upgrade \
                -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                -backend-config="container_name=$(CONTAINER_NAME)" \
                -backend-config="key=terraform.tfstate"
              terraform plan -out=./tfplan
              echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]$(System.DefaultWorkingDirectory)/tfplan"
            displayName: "Terraform Init and Plan"

  # Stage 3: Terraform Apply
  - stage: TerraformApply
    displayName: "Apply Terraform Plan"
    dependsOn: TerraformInitAndPlan
    condition: succeeded()
    jobs:
      - job: TerraformApplyJob
        displayName: "Apply Terraform"
        steps:
          # Step 1: Download Terraform Plan Artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: tfplan
              downloadPath: $(Pipeline.Workspace)

          # Step 2: Apply Terraform Plan
          - script: |
              cd $(Pipeline.Workspace)
              export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
              export ARM_TENANT_ID=$(AZURE_TENANT_ID)
              export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
              terraform apply -auto-approve ./tfplan
            displayName: "Apply Terraform Plan"