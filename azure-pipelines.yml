trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  location: "East US"
  resource_group_name: "Goreg4"
  log_analytics_workspace_name: "goreg4-analytics"
  app_insights_name: "Goreg4-AppInsights"
  saved_query_name: "ErrorLogsQuery"
  saved_query_display_name: "Error Logs Analysis"
  saved_query_category: "Errors"

stages:
  - stage: SetupAndFetchErrors
    displayName: 'Setup Monitoring and Fetch Errors'
    jobs:
      - job: SetupMonitoring
        displayName: 'Enable Application Insights and Log Analytics'
        steps:
          - script: |
              echo "üîë Logging into Azure..."
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              echo "üîé Checking if Application Insights exists..."
              exists=$(az monitor app-insights component show --app $(app_insights_name) --resource-group $(resource_group_name) --query id -o tsv || echo "")

              if [ -z "$exists" ]; then
                echo "‚ö†Ô∏è Application Insights not found. Creating..."
                az monitor app-insights component create --app $(app_insights_name) --location $(location) --resource-group $(resource_group_name) --kind web --application-type web
              else
                echo "‚úÖ Application Insights exists."
              fi

              echo "üîó Linking Application Insights to Log Analytics..."
              az monitor app-insights component update --app $(app_insights_name) --resource-group $(resource_group_name) --workspace $(log_analytics_workspace_name)
            displayName: 'Enable Application Insights and Link to Log Analytics'

      - job: CreateSavedQuery
        displayName: 'Create Saved KQL Query in Log Analytics'
        dependsOn: SetupMonitoring
        steps:
          - script: |
              echo "üîé Getting Log Analytics Workspace ID..."
              workspace_id=$(az monitor log-analytics workspace show \
                --resource-group $(resource_group_name) \
                --workspace-name $(log_analytics_workspace_name) \
                --query customerId -o tsv)

              if [ -z "$workspace_id" ]; then
                echo "‚ùå Failed to get Log Analytics Workspace ID"
                exit 1
              fi

              echo "üîé Checking if the saved KQL query already exists..."
              query_exists=$(az monitor log-analytics query-pack list --resource-group $(resource_group_name) --workspace-name $(log_analytics_workspace_name) --query "[?properties.displayName=='$(saved_query_display_name)']" -o tsv)

              if [ -z "$query_exists" ]; then
                echo "‚úÖ Creating Saved KQL Query..."
                az monitor log-analytics query-pack create \
                  --resource-group $(resource_group_name) \
                  --workspace-name $(log_analytics_workspace_name) \
                  --name $(saved_query_name) \
                  --display-name "$(saved_query_display_name)" \
                  --category "$(saved_query_category)" \
                  --query "union AppTraces, AppRequests, AppDependencies, AppExceptions, AppEvents | where Message contains 'Error' | project timestamp, message, type | order by timestamp desc"
              else
                echo "‚ö†Ô∏è Query already exists, skipping creation."
              fi
            displayName: 'Create Predefined KQL Query'

      - job: FetchErrors
        displayName: 'Run Predefined KQL Queries for Errors'
        dependsOn: CreateSavedQuery
        condition: always()
        steps:
          - script: |
              echo "üîé Getting Log Analytics Workspace ID..."
              workspace_id=$(az monitor log-analytics workspace show \
                --resource-group $(resource_group_name) \
                --workspace-name $(log_analytics_workspace_name) \
                --query customerId -o tsv)

              if [ -z "$workspace_id" ]; then
                echo "‚ùå Failed to get Log Analytics Workspace ID"
                exit 1
              fi

              echo "üîé Running Predefined KQL Query from Logs..."
              query_results=$(az monitor log-analytics query \
                --workspace "$workspace_id" \
                --analytics-query "union AppTraces, AppRequests, AppDependencies, AppExceptions, AppEvents | where Message contains 'Error' | project timestamp, message, type | order by timestamp desc" \
                --output table)

              if [ -z "$query_results" ]; then
                echo "‚ùå No errors found in logs."
                exit 0
              else
                echo "$query_results"
              fi
            displayName: 'Run Predefined KQL Queries for Errors'
