trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  aks_name: "goreg4-aks"
  resource_group_name: "Goreg4"
  log_analytics_workspace_name: "goreg4-analytics"
  diagnostic_setting_name: "goreg4-diagnostics"
  grafana_instance_name: "goreg4-grafana"
  azure_region: "East US"

stages:
# Terraform Stage (Commented Out)
# - stage: Terraform
#   displayName: 'Terraform Stage'
#   jobs:
#   - job: Terraform
#     displayName: 'Terraform Deployment'
#     steps:
#     - script: |
#         curl -LO https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh
#         chmod +x install_linux.sh && ./install_linux.sh
#         curl -sSL https://aka.ms/InstallAzureCLIDeb | sudo bash
#         
#         az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
#         az account set --subscription $(azure_subscription_id)
#       displayName: 'Azure CLI Login'
#     - script: |
#         terraform init
#       displayName: 'Terraform Init'
#     - script: |
#         terraform plan -out=tfplan
#       displayName: 'Terraform Plan'
#     - script: |
#         terraform apply -auto-approve
#       displayName: 'Terraform Apply'
#       env:
#         ARM_CLIENT_ID: $(azure_client_id)
#         ARM_CLIENT_SECRET: $(azure_client_secret)
#         ARM_TENANT_ID: $(azure_tenant_id)
#         ARM_SUBSCRIPTION_ID: $(azure_subscription_id)

- stage: DeployMonitoring
  displayName: 'Deploy Monitoring Tools'
  dependsOn: []
  jobs:
  - job: HelmDeployment
    displayName: 'Deploy Prometheus and Grafana via Helm'
    steps:
    - script: |
        # Login to Azure
        az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
        az account set --subscription $(azure_subscription_id)

        # Get AKS credentials
        az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name)

        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

        # Add Helm charts for Prometheus, Grafana, and Azure Monitor
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo add azuremonitor https://azure.github.io/azure-monitor-openshift-prometheus-helm-charts/
        helm repo update

        # Enable Container Logs for AKS
        az monitor log-analytics workspace pack enable \
          --resource-group $(resource_group_name) \
          --workspace-name $(log_analytics_workspace_name) \
          --pack-name ContainerInsights

        # Enable Managed Prometheus metrics for Azure Monitor
        az monitor log-analytics workspace pack enable \
          --resource-group $(resource_group_name) \
          --workspace-name $(log_analytics_workspace_name) \
          --pack-name Prometheus

        # Enable Managed Grafana for Prometheus data visualization
        az monitor managed-grafana create \
          --resource-group $(resource_group_name) \
          --workspace-id "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
          --name "$(grafana_instance_name)" \
          --location "$(azure_region)" \
          --sku "Standard"

        # Install Azure Monitor Prometheus Agent
        helm install azure-prometheus azuremonitor/prometheus-aks \
          --namespace kube-system \
          --set azureMonitor.workspaceResourceId="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
          --set azureMonitor.prometheus.enabled=true \
          --set azureMonitor.prometheus.scrapeInterval=30s \
          --set azureMonitor.prometheus.metricCategories="{Network}" \
          --wait

        # Install Prometheus operator stack with Azure Monitor integration
        helm install prometheus prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
          --set prometheus.prometheusSpec.serviceMonitorSelector.matchLabels.azureMonitor=true \
          --wait

        # Install Grafana with service exposure and initial password setup
        helm install grafana grafana/grafana \
          --namespace monitoring \
          --set adminPassword='yourpassword' \
          --set service.type=LoadBalancer \
          --wait

        # Set up diagnostic settings for AKS to enable container insights and all relevant metrics
        az monitor diagnostic-settings create \
          --name "$(diagnostic_setting_name)" \
          --resource "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)" \
          --workspace "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
          --metrics '[{"category": "AllMetrics", "enabled": true}]'

        # Enable Network Packet Metrics in Diagnostic Settings
        az monitor diagnostic-settings update \
          --name "$(diagnostic_setting_name)" \
          --resource "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)" \
          --workspace "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
          --metrics '[{"category": "Network", "enabled": true}, {"category": "AllMetrics", "enabled": true}]'

        # Explicitly Update Prometheus Operator Configuration to Scrape Networking Metrics
        helm upgrade prometheus prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --set prometheus.prometheusSpec.additionalScrapeConfigs[0].job_name="network-metrics" \
          --set prometheus.prometheusSpec.additionalScrapeConfigs[0].metrics_path="/metrics" \
          --set prometheus.prometheusSpec.additionalScrapeConfigs[0].static_configs[0].targets[0]="network-service.monitoring.svc.cluster.local:9100" \
          --wait

        # Verify Diagnostic Settings Configuration
        az monitor diagnostic-settings list \
          --resource "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)"

        # Verify Prometheus Targets
        curl -XGET "http://<Prometheus-Service-URL>/api/v1/targets" | grep "network-metrics"

        # Verify Networking Metrics in Prometheus Logs
        kubectl logs -n monitoring $(kubectl get pods -n monitoring -l app=prometheus -o jsonpath='{.items[0].metadata.name}') | grep "Packets dropped"
      displayName: 'Install Prometheus, Grafana, and Configure Insights'
      env:
        KUBECONFIG: $(Build.SourcesDirectory)/.kube/config