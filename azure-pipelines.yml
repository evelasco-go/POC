trigger:
  branches:
    include:
      - dev

variables:
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
  RESOURCE_GROUP_NAME: "POCMyResourceGroup"
  STORAGE_ACCOUNT_NAME: "pocmystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "eastus"
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'

stages:
  - stage: InstallTerraform
    displayName: "Install Terraform Version 1.9.8"
    jobs:
      - job: InstallTerraformJob
        displayName: "Install Terraform"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '1.9.8'

  - stage: ImportExistingResources
    displayName: "Import Existing Resources"
    dependsOn: InstallTerraform
    jobs:
      - job: ImportResources
        displayName: "Import AKS Cluster"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
                
                # Import the existing AKS cluster into Terraform
                terraform import azurerm_kubernetes_cluster.aks /subscriptions/$(AZURE_SUBSCRIPTION_ID)/resourceGroups/$(RESOURCE_GROUP_NAME)/providers/Microsoft.ContainerService/managedClusters/$(AKS_NAME)

  - stage: TerraformInitAndPlan
    displayName: "Initialize and Plan Terraform"
    dependsOn: ImportExistingResources
    jobs:
      - job: TerraformInitAndPlanJob
        displayName: "Terraform Init and Plan"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
                
                # Ensure Terraform initialization with reconfigure
                terraform init -reconfigure \
                  -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(CONTAINER_NAME)" \
                  -backend-config="key=terraform.tfstate" \
                  -get-plugins=true

                # Run terraform plan and output the plan to a specific directory
                terraform plan -out=$(Build.ArtifactStagingDirectory)/tfplan

  - stage: TerraformApply
    displayName: "Apply Terraform Plan"
    dependsOn: TerraformInitAndPlan
    condition: succeeded()
    jobs:
      - job: TerraformApplyJob
        displayName: "Apply Terraform"
        steps:
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: 'tfplan'
              publishLocation: 'Container'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(Build.ArtifactStagingDirectory)
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)

                # Apply the plan
                terraform apply -auto-approve tfplan
