trigger:
  branches:
    include:
      - dev  # Replace with your branch name

variables:
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
  RESOURCE_GROUP_NAME: "POCMyResourceGroup"
  STORAGE_ACCOUNT_NAME: "pocmystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "eastus"
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"
  # Hardcoded values for debugging
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'

stages:

  # Stage 1: Install Terraform Version 1.9.8
  - stage: InstallTerraform
    displayName: "Install Terraform Version 1.9.8"
    jobs:
      - job: InstallTerraformJob
        displayName: "Install Terraform"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '1.9.8'  # Ensures you're using Terraform version 1.9.8

  # Stage 2: Create Azure Resources
  - stage: CreateResources
    displayName: "Create Azure Resources"
    dependsOn: InstallTerraform
    jobs:
      - job: CreateAzureResources
        displayName: "Create Resource Group and Storage Account"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az group create --name $(RESOURCE_GROUP_NAME) --location $(LOCATION)
                az storage account create \
                  --name $(STORAGE_ACCOUNT_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --location $(LOCATION) \
                  --sku Standard_LRS
                az storage container create \
                  --name $(CONTAINER_NAME) \
                  --account-name $(STORAGE_ACCOUNT_NAME)

  # Stage 3: Terraform Init, Import, and Plan
  - stage: TerraformInitImportAndPlan
    displayName: "Initialize, Import, and Plan Terraform"
    dependsOn: CreateResources
    jobs:
      - job: TerraformInitImportAndPlanJob
        displayName: "Terraform Init, Import, and Plan"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)

                # Clear any existing lock file to avoid dependency issues
                rm -f terraform.lock.hcl

                # Initialize Terraform with reconfiguration
                terraform init -upgrade -reconfigure \
                  -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(CONTAINER_NAME)" \
                  -backend-config="key=terraform.tfstate"

                # Import the existing resource group
                terraform import azurerm_resource_group.rg "/subscriptions/$(AZURE_SUBSCRIPTION_ID)/resourceGroups/$(RESOURCE_GROUP_NAME)"

                # Plan the Terraform changes and output it to a file
                terraform plan -out=tfplan
                echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]$(System.DefaultWorkingDirectory)/tfplan"

  # Stage 4: Terraform Apply
  - stage: TerraformApply
    displayName: "Apply Terraform Plan"
    dependsOn: TerraformInitImportAndPlan
    condition: succeeded()
    jobs:
      - job: TerraformApplyJob
        displayName: "Apply Terraform"
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: tfplan
              downloadPath: $(Pipeline.Workspace)
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(Pipeline.Workspace)
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
                terraform apply -auto-approve tfplan
