trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVarsFile: 'terraform.tfvars'  # Path to your TFvars file in the repository

stages:
- stage: Terraform
  displayName: 'Terraform Stage'
  jobs:
  - job: Terraform
    displayName: 'Terraform Deployment'
    steps:
    - script: |
        set -e

        echo "Reading Azure Subscription from terraform.tfvars..."
        export azureSubscription=$(grep 'azureSubscription' $(terraformVarsFile) | cut -d '=' -f2 | tr -d ' "')
        if [ -z "$azureSubscription" ]; then
          echo "Error: azureSubscription not found in terraform.tfvars!"
          exit 1
        fi

        echo "Logging in to Azure..."
        az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)

        echo "Setting Azure Subscription..."
        az account set --subscription "$azureSubscription"

        echo "Initializing Terraform..."
        terraform init

        echo "Importing resources into Terraform state..."
        terraform import azurerm_monitor_diagnostic_setting.aks_metrics "/subscriptions/$azureSubscription/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)|aks-metrics-diagnostic-setting2"
        terraform import azurerm_resource_group.example "/subscriptions/$azureSubscription/resourceGroups/$(resource_group_name)"
        terraform import azurerm_kubernetes_cluster.example "/subscriptions/$azureSubscription/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)"
        terraform import azurerm_storage_account.example "/subscriptions/$azureSubscription/resourceGroups/$(resource_group_name)/providers/Microsoft.Storage/storageAccounts/$(storage_account_name)"
        terraform import azurerm_storage_container.example "/subscriptions/$azureSubscription/resourceGroups/$(resource_group_name)/providers/Microsoft.Storage/storageAccounts/$(storage_account_name)/blobServices/default/containers/$(container_name)"
        terraform import azurerm_log_analytics_workspace.example "/subscriptions/$azureSubscription/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)"

        echo "Running Terraform plan..."
        terraform plan -var-file=$(terraformVarsFile) -out=tfplan

        echo "Applying Terraform changes..."
        terraform apply -auto-approve tfplan
      displayName: 'Terraform Initialize, Import, and Apply'
      workingDirectory: $(Build.SourcesDirectory)
      env:
        ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
        ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        ARM_TENANT_ID: $(AZURE_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $azureSubscription

- stage: DeployMonitoring
  displayName: 'Deploy Monitoring Tools'
  dependsOn: Terraform
  jobs:
  - job: HelmDeployment
    displayName: 'Deploy Prometheus and Grafana via Helm'
    steps:
    - script: |
        set -e

        echo "Logging in to Azure..."
        az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)

        echo "Setting Azure Subscription..."
        az account set --subscription "$(azureSubscription)"

        echo "Getting AKS credentials..."
        az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name)

        echo "Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

        echo "Adding Helm repositories..."
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

        echo "Deploying Prometheus and Grafana using Helm..."
        helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
        helm install grafana grafana/grafana --namespace monitoring --set adminPassword='yourpassword' --set service.type=LoadBalancer

        echo "Verifying deployments..."
        kubectl get pods -n monitoring
      displayName: 'Install Prometheus and Grafana via Helm'
      env:
        KUBECONFIG: $(Build.SourcesDirectory)/.kube/config  # Ensure kubeconfig is set properly
