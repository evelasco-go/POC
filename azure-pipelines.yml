trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVarsFile: 'terraform.tfvars'

stages:
- stage: Terraform
  displayName: 'Terraform Stage'
  jobs:
  - job: Terraform
    displayName: 'Terraform Deployment'
    steps:
    - script: |
        echo "Debugging Variables:"
        echo "Azure Subscription: $(azureSubscription)"
        echo "Resource Group Name: $(resource_group_name)"
        echo "AKS Name: $(aks_name)"
        echo "Storage Account Name: $(storage_account_name)"
        echo "Container Name: $(container_name)"
        echo "Log Analytics Workspace Name: $(log_analytics_workspace_name)"
      displayName: 'Debug Loaded Variables'
    
    - script: |
        set -e  # Exit on error
        echo "Logging in to Azure..."
        az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
        az account set --subscription "$(azureSubscription)"
        
        echo "Initializing Terraform..."
        terraform init

        echo "Checking and importing resources as needed..."
        terraform state show azurerm_resource_group.example || \
          terraform import azurerm_resource_group.example "/subscriptions/$(azureSubscription)/resourceGroups/$(resource_group_name)"

        terraform state show azurerm_kubernetes_cluster.example || \
          terraform import azurerm_kubernetes_cluster.example "/subscriptions/$(azureSubscription)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)"

        terraform state show azurerm_storage_account.example || \
          terraform import azurerm_storage_account.example "/subscriptions/$(azureSubscription)/resourceGroups/$(resource_group_name)/providers/Microsoft.Storage/storageAccounts/$(storage_account_name)"

        terraform state show azurerm_storage_container.example || \
          terraform import azurerm_storage_container.example "/subscriptions/$(azureSubscription)/resourceGroups/$(resource_group_name)/providers/Microsoft.Storage/storageAccounts/$(storage_account_name)/blobServices/default/containers/$(container_name)"

        terraform state show azurerm_log_analytics_workspace.example || \
          terraform import azurerm_log_analytics_workspace.example "/subscriptions/$(azureSubscription)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)"

        terraform state show azurerm_monitor_diagnostic_setting.aks_metrics || \
          terraform import azurerm_monitor_diagnostic_setting.aks_metrics "/subscriptions/$(azureSubscription)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)|aks-metrics-diagnostic-setting2"

        echo "Running Terraform Plan..."
        terraform plan -var-file=$(terraformVarsFile) -out=tfplan

        echo "Applying Terraform Plan..."
        terraform apply -auto-approve tfplan
      displayName: 'Terraform Initialize, Import, and Apply'
      workingDirectory: $(Build.SourcesDirectory)
      env:
        ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
        ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        ARM_TENANT_ID: $(AZURE_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(azureSubscription)


- stage: DeployMonitoring
  displayName: 'Deploy Monitoring Tools'
  dependsOn: Terraform
  jobs:
  - job: HelmDeployment
    displayName: 'Deploy Prometheus and Grafana via Helm'
    steps:
    - script: |
        az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
        az account set --subscription "$(azureSubscription)"
        az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name)
        
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        
        helm install grafana grafana/grafana --namespace monitoring \
          --set adminPassword=$(GRAFANA_ADMIN_PASSWORD) \
          --set service.type=LoadBalancer
      displayName: 'Install Prometheus and Grafana'
