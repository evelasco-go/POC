trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'
  resource_group_name: 'POCMyResourceGroup'  # Override if needed
  location: 'East US'                     # Override if needed
  storage_account_name: 'pocmystorageacct123'  # Override if needed
  container_name: 'tfstate'               # Override if needed
  aks_name: 'MyAKSCluster'                # Override if needed
  node_count: 2                           # Override if needed


stages:
- stage: CreateResources
  displayName: "Create Azure Resources"
  jobs:
  - job: CreateAzureResources
    displayName: "Create Resource Group and Storage Account"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Create Resource Group
          az group create --name ${{ variables.RESOURCE_GROUP_NAME }} --location "East US"

          # Create Storage Account with a valid name (must be lowercase and between 3-24 characters)
          az storage account create \
            --name ${{ variables.STORAGE_ACCOUNT_NAME }} \
            --resource-group ${{ variables.RESOURCE_GROUP_NAME }} \
            --location "East US" \
            --sku Standard_LRS

          # Create a container to store Terraform state
          az storage container create \
            --name ${{ variables.CONTAINER_NAME }} \
            --account-name ${{ variables.STORAGE_ACCOUNT_NAME }}

# Stage 1: Terraform Plan
- stage: TerraformPlan
  displayName: "Plan Infrastructure"
  jobs:
  - job: TerraformPlan
    displayName: "Run Terraform Plan"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Initialize Terraform with backend configuration
          terraform init -reconfigure

          # Run Terraform Plan and save it as tfplan
          terraform plan -out=tfplan

          # Upload the plan artifact
          echo "Uploading plan artifact..."
          echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]tfplan"

# Stage 2: Terraform Apply (with Manual Approval)
- stage: TerraformApply
  displayName: "Apply Infrastructure"
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
  - deployment: TerraformApply
    displayName: "Run Terraform Apply"
    environment: "ManualApproval"
    strategy:
      runOnce:
        deploy:
          steps:
          - download: tfplan
            artifact: tfplan
            displayName: "Download Plan Artifact"

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Initialize Terraform with backend configuration
                terraform init -reconfigure

                # Ensure the tfplan file exists before applying
                if [ ! -f tfplan ]; then
                  echo "Error: Plan file not found. Apply aborted."
                  exit 1
                fi

                # Apply Terraform Plan
                terraform apply -auto-approve tfplan