trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  location: "East US"
  node_count: 2
  log_analytics_sku: "PerGB2018"
  resource_group_name: "Goreg4"
  aks_name: "goreg4-aks"
  grafana_name: "Goreg4-Grafana"

stages:
  - stage: DeployMonitoringStandalone
    displayName: 'Deploy Prometheus and Grafana without dependencies'
    jobs:
      - job: HelmDeployment
        displayName: 'Deploy Prometheus and Grafana via Helm'
        steps:
          - script: |
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)
              az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name)
              kubectl cluster-info
              curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo add grafana https://grafana.github.io/helm-charts
              helm repo update
              helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace --wait
              helm install grafana grafana/grafana --namespace monitoring --set adminPassword='yourpassword' --set service.type=LoadBalancer --wait
              kubectl get pods -n monitoring
            displayName: 'Install Prometheus and Grafana via Helm'

  - stage: EnablePrometheusVisualization
    displayName: 'Enable Managed Prometheus Visualization'
    jobs:
      - job: EnablePrometheus
        displayName: 'Enable Managed Prometheus & Grafana'
        steps:
          - script: |
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              # Enable Preview Feature
              az feature register --namespace Microsoft.ContainerService --name AKSManagedPrometheusWithGrafana
              while [[ "$(az feature show --namespace Microsoft.ContainerService --name AKSManagedPrometheusWithGrafana --query properties.state -o tsv)" != "Registered" ]]; do
                echo "Waiting for feature registration..."
                sleep 30
              done

              # Register Provider
              az provider register --namespace Microsoft.ContainerService

              # Enable Managed Prometheus
              az aks update -g $(resource_group_name) -n $(aks_name) --enable-managed-prometheus

              # Create Grafana if not exists
              if ! az grafana show --name $(grafana_name) --resource-group $(resource_group_name); then
                az grafana create --name $(grafana_name) --resource-group $(resource_group_name) --location $(location)
              fi

              # Link Prometheus to Grafana
              az grafana data-source create --name $(grafana_name) --resource-group $(resource_group_name) --definition '{
                "name": "Prometheus",
                "type": "prometheus",
                "access": "proxy",
                "url": "http://prometheus.monitoring.svc.cluster.local",
                "isDefault": true
              }'
            displayName: 'Enable Prometheus & Link to Grafana'

  - stage: LinkGrafanaToPrometheus
    displayName: 'Link Azure Managed Grafana to Prometheus'
    jobs:
      - job: LinkGrafana
        displayName: 'Link Grafana to Prometheus'
        steps:
          - script: |
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              # Check if Grafana exists, if not create it
              if ! az grafana show --name $(grafana_name) --resource-group $(resource_group_name); then
                az grafana create --name $(grafana_name) --resource-group $(resource_group_name) --location $(location)
              fi

              # Configure Prometheus Data Source
              az grafana data-source create --name $(grafana_name) --resource-group $(resource_group_name) --definition '{
                "name": "Prometheus",
                "type": "prometheus",
                "access": "proxy",
                "url": "http://prometheus.monitoring.svc.cluster.local",
                "isDefault": true
              }'

              az grafana data-source list --name $(grafana_name) --resource-group $(resource_group_name)
            displayName: 'Configure Grafana Data Source'
