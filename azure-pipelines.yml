trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  location: "eastus"
  resource_group_name: "Goreg4"
  aks_name: "goreg4-aks"
  dcr_name: "PrometheusDCR"
  dcr_id: "/subscriptions/15e60859-88d7-4c84-943f-55488479910c/resourceGroups/Goreg4/providers/Microsoft.Insights/dataCollectionRules/PrometheusDCR"

stages:
  - stage: EnablePrometheus
    displayName: 'Enable Managed Prometheus & Recording Rules'
    jobs:
      - job: EnablePrometheus
        steps:
          - script: |
              echo "🔑 Logging into Azure..."
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              echo "🔄 Checking if Managed Prometheus is enabled..."
              if az aks show --resource-group $(resource_group_name) --name $(aks_name) --query "addonProfiles.azureMonitorProfile.enabled" -o tsv | grep -q "true"; then
                echo "✅ Managed Prometheus is already enabled. Skipping."
              else
                echo "🔄 Enabling Managed Prometheus..."
                az aks update --resource-group $(resource_group_name) --name $(aks_name) --enable-azure-monitor-metrics
                echo "✅ Managed Prometheus enabled successfully!"
              fi

              echo "🔄 Checking if Data Collection Rule (DCR) exists..."
              if ! az monitor data-collection rule show --name $(dcr_name) --resource-group $(resource_group_name) &>/dev/null; then
                echo "🔄 Creating new Data Collection Rule (DCR) for Prometheus..."
                az monitor data-collection rule create --name $(dcr_name) \
                  --resource-group $(resource_group_name) \
                  --location $(location) \
                  --data-flows "[{\"streams\": [\"Microsoft-PrometheusMetrics\"], \"destinations\": [\"azure-monitor-metrics\"]}]" \
                  --destinations "{\"name\": \"azure-monitor-metrics\", \"type\": \"azure-monitor-metrics\"}"

                if [ $? -eq 0 ]; then
                  echo "✅ Created DCR: $(dcr_name)"
                else
                  echo "❌ Failed to create DCR. Exiting."
                  exit 1
                fi
              else
                echo "✅ DCR already exists."
              fi

              echo "🔄 Verifying if Data Collection Rule (DCR) exists before configuring Prometheus Recording Rules..."
              if ! az monitor data-collection rule show --name $(dcr_name) --resource-group $(resource_group_name) &>/dev/null; then
                echo "❌ Data Collection Rule (DCR) was not found. Exiting."
                exit 1
              fi

              echo "🔄 Configuring Prometheus Recording Rules..."
              az monitor metrics alert create --name "PrometheusRecordingRules" \
                --resource-group $(resource_group_name) \
                --scopes $(dcr_id) \
                --condition "max AzureMonitorPrometheusRecordingRule > 90" \
                --window-size 5m \
                --evaluation-frequency 1m \
                --description "Enables Prometheus recording rules for better visualizations."

              echo "✅ Managed Prometheus with Recording Rules enabled successfully!"
            displayName: 'Enable Prometheus & Recording Rules'


  - stage: DeployPrometheus
    displayName: 'Deploy Prometheus on AKS'
    jobs:
      - job: DeployPrometheus
        steps:
          - script: |
              echo "🔑 Logging into Azure..."
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              echo "🔄 Setting AKS context..."
              az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name) --overwrite-existing

              echo "🔄 Ensuring 'monitoring' namespace exists..."
              kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

              echo "🔄 Deploying Prometheus..."
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: prometheus
                namespace: monitoring
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: prometheus
                template:
                  metadata:
                    labels:
                      app: prometheus
                  spec:
                    containers:
                    - name: prometheus
                      image: mcr.microsoft.com/azuremonitor/containerinsights/ciprod/prometheus-remote-write/images:prom-remotewrite-20240617.1
                      env:
                      - name: INGESTION_URL
                        value: "$(ingestion_url)"
                      - name: MANAGED_IDENTITY_CLIENT_ID
                        value: "$(azure_client_id)"
                      - name: CLUSTER_NAME
                        value: "$(aks_name)"
              EOF

              echo "✅ Prometheus deployed successfully!"
            displayName: 'Deploy Prometheus on AKS'
