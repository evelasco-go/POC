trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'
  azure_subscription: "Software Development (15e60859-88d7-4c84-943f-55488479910c)"
  resource_group_name: 'POCMyResourceGroup'  # Override if needed
  location: 'East US'                     # Override if needed
  storage_account_name: 'pocmystorageacct123'  # Override if needed
  container_name: 'tfstate'               # Override if needed
  aks_name: 'MyAKSCluster'                # Override if needed
  node_count: 2                           # Override if needed


stages:
- stage: CreateResources
  displayName: "Create Azure Resources"
  jobs:
  - job: CreateAzureResources
    displayName: "Create Resource Group and Storage Account"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azure_subscription }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Create Resource Group
          az group create --name ${{ variables.resource_group_name }} --location ${{ variables.location }}

          # Create Storage Account with a valid name (must be lowercase and between 3-24 characters)
          az storage account create \
            --name ${{ variables.storage_account_name }} \
            --resource-group ${{ variables.resource_group_name }} \
            --location ${{ variables.location }} \
            --sku Standard_LRS

          # Create a container to store Terraform state
          az storage container create \
            --name ${{ variables.container_name }} \
            --account-name ${{ variables.storage_account_name }}

- stage: TerraformPlan
  displayName: "Plan Infrastructure"
  jobs:
    - job: TerraformPlan
      displayName: "Run Terraform Plan"
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ variables.azure_subscription }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Authenticate using a Service Principal
              az login --service-principal -u ${{ variables.azure_client_id }} -p ${{ variables.azure_client_secret }} --tenant ${{ variables.azure_tenant_id }}

              # Initialize Terraform with backend configuration
              terraform init -reconfigure  # Reconfigure the backend configuration

              # Run Terraform Plan and output it to tfplan
              terraform plan -out=tfplan

              # Upload the plan as an artifact
              echo "Uploading plan artifact..."
              echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]tfplan"

- stage: TerraformApply
  displayName: "Apply Infrastructure"
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
    - deployment: TerraformApply
      displayName: "Run Terraform Apply"
      environment: "ManualApproval"
      strategy:
        runOnce:
          deploy:
            steps:
              # Download the Terraform plan artifact
              - download: tfplan
                artifact: tfplan
                displayName: "Download Plan Artifact"

              # Apply the Terraform plan
              - task: AzureCLI@2
                inputs:
                  azureSubscription: ${{ variables.azure_subscription }}
                  scriptType: 'bash'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    # Authenticate using a Service Principal
                    az login --service-principal -u ${{ variables.azure_client_id }} -p ${{ variables.azure_client_secret }} --tenant ${{ variables.azure_tenant_id }}

                    # Initialize Terraform with backend configuration
                    terraform init -reconfigure

                    # Ensure tfplan exists
                    if [ ! -f tfplan ]; then
                      echo "Error: Plan file not found. Aborting."
                      exit 1
                    fi

                    # Apply the Terraform plan
                    terraform apply -auto-approve tfplan