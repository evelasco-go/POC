trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Terraform
  displayName: 'Terraform Stage'
  jobs:
  - job: Terraform
    displayName: 'Terraform Deployment'
    steps:
    - script: |
        set -e

        # Initializing Terraform and configuring the backend
        echo "Initializing Terraform..."
        terraform init -backend-config="storage_account_name=$(grep -i '^storage_account_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")" \
                       -backend-config="container_name=$(grep -i '^container_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")" \
                       -backend-config="key=terraform.tfstate" \
                       -backend-config="resource_group_name=$(grep -i '^resource_group_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")" \
                       -backend-config="subscription_id=$(grep -i '^azureSubscription' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")"

        # Importing resources into Terraform state
        echo "Importing resources into Terraform state..."
        terraform import azurerm_monitor_diagnostic_setting.aks_metrics \
          "/subscriptions/$(grep -i '^azureSubscription' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")/resourceGroups/$(grep -i '^resource_group_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")/providers/Microsoft.ContainerService/managedClusters/$(grep -i '^aks_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")|$(grep -i '^diagnostic_setting_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")"

        # Running Terraform plan
        echo "Running Terraform plan..."
        terraform plan -var-file=terraform.tfvars -out=tfplan

        # Applying the Terraform plan
        echo "Applying Terraform changes..."
        terraform apply -auto-approve tfplan
      displayName: 'Terraform Initialize, Import, and Apply'
      workingDirectory: $(Build.SourcesDirectory)
      env:
        ARM_CLIENT_ID: $(grep -i '^azure_client_id' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")"
        ARM_CLIENT_SECRET: $(grep -i '^azure_client_secret' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")"
        ARM_TENANT_ID: $(grep -i '^azure_tenant_id' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")"
        ARM_SUBSCRIPTION_ID: $(grep -i '^azure_subscription_id' terraform.tfvars | cut -d '=' -f2 | tr -d ' \")'

- stage: DeployMonitoring
  displayName: 'Deploy Monitoring Tools'
  dependsOn: Terraform
  jobs:
  - job: HelmDeployment
    displayName: 'Deploy Prometheus and Grafana via Helm'
    steps:
    - script: |
        set -e

        echo "Logging in to Azure..."
        az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)

        echo "Setting Azure Subscription..."
        az account set --subscription "$(azureSubscription)"

        echo "Getting AKS credentials..."
        az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name)

        echo "Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

        echo "Adding Helm repositories..."
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

        echo "Deploying Prometheus and Grafana using Helm..."
        helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
        helm install grafana grafana/grafana --namespace monitoring --set adminPassword='yourpassword' --set service.type=LoadBalancer

        echo "Verifying deployments..."
        kubectl get pods -n monitoring
      displayName: 'Install Prometheus and Grafana via Helm'
      env:
        KUBECONFIG: $(Build.SourcesDirectory)/.kube/config  # Ensure kubeconfig is set properly
