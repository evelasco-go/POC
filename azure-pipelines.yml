trigger:
  branches:
    include:
      - dev # Replace with your branch name

variables:
  AZURE_CLIENT_ID: "<your-client-id>" # Replace with actual value
  AZURE_CLIENT_SECRET: "<your-client-secret>" # Replace with actual value
  AZURE_TENANT_ID: "<your-tenant-id>" # Replace with actual value
  AZURE_SUBSCRIPTION_ID: "<your-subscription-id>" # Replace with actual value
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)' # Service connection name
  RESOURCE_GROUP_NAME: "MyResourceGroup"
  STORAGE_ACCOUNT_NAME: "mystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "West US"
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"

stages:
  - stage: CreateResources
    displayName: "Create Azure Resources"
    jobs:
      - job: CreateAzureResources
        displayName: "Create Resource Group and Storage Account"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create Resource Group
                az group create --location "${{ variables.LOCATION }}" --resource-group "${{ variables.RESOURCE_GROUP_NAME }}"

                # Create Storage Account
                az storage account create \
                  --name "${{ variables.STORAGE_ACCOUNT_NAME }}" \
                  --resource-group "${{ variables.RESOURCE_GROUP_NAME }}" \
                  --location "${{ variables.LOCATION }}" \
                  --sku Standard_LRS

                # Create Storage Container
                az storage container create \
                  --name "${{ variables.CONTAINER_NAME }}" \
                  --account-name "${{ variables.STORAGE_ACCOUNT_NAME }}"

  - stage: TerraformInit
    displayName: "Initialize Terraform"
    dependsOn: CreateResources
    jobs:
      - job: TerraformInitJob
        displayName: "Terraform Init"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Authenticate with Service Principal
                az login --service-principal \
                  -u "${{ variables.AZURE_CLIENT_ID }}" \
                  -p "${{ variables.AZURE_CLIENT_SECRET }}" \
                  --tenant "${{ variables.AZURE_TENANT_ID }}"

                # Export Storage Account Key
                export ARM_ACCESS_KEY=$(az storage account keys list \
                  --account-name "${{ variables.STORAGE_ACCOUNT_NAME }}" \
                  --resource-group "${{ variables.RESOURCE_GROUP_NAME }}" \
                  --query "[0].value" -o tsv)

                # Initialize Terraform
                terraform init -backend-config="storage_account_name=${{ variables.STORAGE_ACCOUNT_NAME }}" \
                               -backend-config="container_name=${{ variables.CONTAINER_NAME }}" \
                               -backend-config="key=terraform.tfstate" \
                               -backend-config="access_key=$ARM_ACCESS_KEY" \
                               -reconfigure

  - stage: TerraformPlan
    displayName: "Plan Infrastructure"
    dependsOn: TerraformInit
    jobs:
      - job: TerraformPlanJob
        displayName: "Run Terraform Plan"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Run Terraform Plan
                terraform plan -out=tfplan

                # Upload the plan as an artifact
                echo "Uploading plan artifact..."
                echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]tfplan"

  - stage: TerraformApply
    displayName: "Apply Infrastructure"
    dependsOn: TerraformPlan
    condition: succeeded()
    jobs:
      - job: TerraformApplyJob
        displayName: "Apply Terraform Plan"
        steps:
          - download: tfplan
            artifact: tfplan
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Apply Terraform Plan
                terraform apply -auto-approve tfplan
