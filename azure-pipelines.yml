trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  location: "eastus"
  resource_group_name: "Goreg4"
  aks_name: "goreg4-aks"
  dcr_name: "PrometheusDCR"
  ingestion_url: "https://defaultazuremonitorworkspace-eastus-964j.eastus-1.metrics.ingest.monitor.azure.com/dataCollectionRules/dcr-57a879c781d44ab38afebcb72da1944e/streams/Microsoft-PrometheusMetrics/api/v1/write?api-version=2023-04-24"

stages:
  - stage: EnablePrometheus
    displayName: 'Enable Managed Prometheus'
    jobs:
      - job: EnablePrometheus
        steps:
          - script: |
              echo "ðŸ”‘ Logging into Azure..."
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              echo "ðŸ”„ Enabling Managed Prometheus..."
              az aks update --resource-group $(resource_group_name) --name $(aks_name) --enable-azure-monitor-metrics
              echo "âœ… Managed Prometheus enabled successfully!"
            displayName: 'Enable Managed Prometheus'

  - stage: ConfigureDCR
    displayName: 'Configure Data Collection Rule'
    jobs:
      - job: ConfigureDCR
        steps:
          - script: |
              echo "ðŸ”„ Checking if Data Collection Rule (DCR) exists..."
              DCR_EXISTS=$(az monitor data-collection rule show --name $(dcr_name) --resource-group $(resource_group_name) --query "name" -o tsv || echo "not_found")

              if [ "$DCR_EXISTS" = "not_found" ]; then
                echo "ðŸ”„ Creating new Data Collection Rule (DCR) for Prometheus..."
                az monitor data-collection rule create \
                  --name $(dcr_name) \
                  --resource-group $(resource_group_name) \
                  --location $(location) \
                  --data-flows '[{"streams": ["Microsoft-PrometheusMetrics"], "destinations": ["azure-monitor-metrics"]}]' \
                  --destinations '[{"name": "azure-monitor-metrics", "type": "azure-monitor-metrics"}]'
                
                echo "âœ… Data Collection Rule (DCR) created successfully!"
              else
                echo "âœ… DCR already exists. Skipping creation."
              fi
            displayName: 'Create Data Collection Rule (DCR)'

  - stage: EnableRecordingRules
    displayName: 'Enable Prometheus Recording Rules'
    jobs:
      - job: EnableRecordingRules
        steps:
          - script: |
              echo "ðŸ”„ Checking if Recording Rules are enabled..."
              RECORDING_RULES_ENABLED=$(az monitor metrics alert list --resource-group $(resource_group_name) --query "[?name=='PrometheusRecordingRules'].name" -o tsv || echo "not_found")

              if [ "$RECORDING_RULES_ENABLED" = "not_found" ]; then
                echo "ðŸ”„ Configuring Prometheus Recording Rules..."
                az monitor metrics alert create \
                  --name "PrometheusRecordingRules" \
                  --resource-group $(resource_group_name) \
                  --scopes "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.Insights/dataCollectionRules/$(dcr_name)" \
                  --condition "avg AzureMonitorPrometheusRecordingRule > 0" \
                  --window-size 5m \
                  --evaluation-frequency 1m
                echo "âœ… Prometheus Recording Rules enabled successfully!"
              else
                echo "âœ… Recording Rules already configured. Skipping."
              fi
            displayName: 'Enable Prometheus Recording Rules'

  - stage: DeployPrometheus
    displayName: 'Deploy Prometheus to AKS'
    jobs:
      - job: DeployPrometheus
        steps:
          - script: |
              echo "ðŸ”‘ Logging into Azure..."
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              echo "ðŸ”„ Setting AKS context..."
              az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name) --overwrite-existing

              echo "ðŸ”„ Ensuring monitoring namespace exists..."
              kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

              echo "ðŸ”„ Deploying Prometheus..."
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: prometheus
                namespace: monitoring
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: prometheus
                template:
                  metadata:
                    labels:
                      app: prometheus
                  spec:
                    containers:
                    - name: prometheus
                      image: mcr.microsoft.com/azuremonitor/containerinsights/ciprod/prometheus-remote-write/images:prom-remotewrite-20240617.1
                      env:
                      - name: INGESTION_URL
                        value: "$(ingestion_url)"
                      - name: MANAGED_IDENTITY_CLIENT_ID
                        value: "$(azure_client_id)"
                      - name: CLUSTER_NAME
                        value: "$(aks_name)"
              EOF

              echo "âœ… Prometheus deployed successfully!"
            displayName: 'Deploy Prometheus to AKS'
