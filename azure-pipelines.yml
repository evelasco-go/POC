trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'

stages:
- stage: Terraform
  jobs:
  - job: Terraform
    steps:
    - script: |
        # Install Terraform
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        sudo apt update && sudo apt install terraform

        # Initialize Terraform
        terraform init

        # Import existing resources into Terraform state
        terraform import azurerm_resource_group.example /subscriptions/15e60859-88d7-4c84-943f-55488479910c/resourceGroups/POCMyResourceGroup
        terraform import azurerm_kubernetes_cluster.example /subscriptions/15e60859-88d7-4c84-943f-55488479910c/resourceGroups/POCMyResourceGroup/providers/Microsoft.ContainerService/managedClusters/MyAKSCluster
        terraform import azurerm_storage_account.example /subscriptions/15e60859-88d7-4c84-943f-55488479910c/resourceGroups/POCMyResourceGroup/providers/Microsoft.Storage/storageAccounts/pocmystorageacct123
        terraform import azurerm_storage_container.example /subscriptions/15e60859-88d7-4c84-943f-55488479910c/resourceGroups/POCMyResourceGroup/providers/Microsoft.Storage/storageAccounts/pocmystorageacct123/blobServices/default/containers/tfstate
        terraform import azurerm_log_analytics_workspace.example /subscriptions/15e60859-88d7-4c84-943f-55488479910c/resourceGroups/POCMyResourceGroup/providers/Microsoft.OperationalInsights/workspaces/goreg-test-analytics-workspace2
        terraform import azurerm_monitor_diagnostic_setting.aks_metrics "/subscriptions/15e60859-88d7-4c84-943f-55488479910c/resourceGroups/POCMyResourceGroup/providers/Microsoft.ContainerService/managedClusters/MyAKSCluster|aks-metrics-diagnostic-setting"
        
        # Run Terraform Plan
        terraform plan -out=tfplan

        # Apply the Terraform configuration
        terraform apply -auto-approve tfplan
      displayName: 'Install Terraform, Initialize, Plan, Import, and Apply'
      workingDirectory: $(Build.SourcesDirectory) # Root directory of your repo
      env:
        AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
        AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
        AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
        AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'

- stage: DeployGrafana
  dependsOn: Terraform
  jobs:
  - job: HelmDeployment
    steps:
    - script: |
        # Ensure kubeconfig content is set
        mkdir -p ~/.kube
        echo "$KUBECONFIG" > ~/.kube/config
        chmod 600 ~/.kube/config

        # Verify cluster connection
        kubectl cluster-info

        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

        # Add Grafana Helm chart repository
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

        # Deploy Grafana using Helm
        helm install grafana grafana/grafana \
          --namespace monitoring \
          --create-namespace \
          --set adminPassword='yourpassword' \
          --set service.type=LoadBalancer
      displayName: 'Deploy Grafana via Helm'
      env:
        KUBECONFIG: $(kubeconfig)  # Ensure kubeconfig content is passed
