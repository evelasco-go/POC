trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  TF_VAR_resource_group_name: 'MyResourceGroup'
  TF_VAR_location: 'East US'
  TF_VAR_storage_account_name: 'mystorageacct123'
  TF_VAR_container_name: 'tfstate'
  TF_VAR_aks_name: 'MyAKSCluster'
  TF_VAR_node_count: 2

stages:
# Stage 1: Terraform Plan
- stage: TerraformPlan
  displayName: "Plan Infrastructure"
  jobs:
  - job: TerraformPlan
    displayName: "Run Terraform Plan"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'  # Use the correct Azure subscription ID
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Install Terraform
          curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y terraform

          # Initialize Terraform with backend configuration (reconfigure to change backend if needed)
          terraform init -reconfigure

          # Run Terraform Plan with detailed exit code (detect changes)
          terraform plan -detailed-exitcode -out=tfplan

          # Check if there are changes (code 2 means changes, 0 means no changes)
          if [ $? -eq 2 ]; then
            echo "Changes detected, uploading plan artifact..."
            terraform show -json tfplan > tfplan.json
            echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]tfplan.json"
          else
            echo "No changes detected, skipping Terraform apply."
            exit 0  # Exit early as there are no changes
          fi

# Stage 2: Terraform Apply (with Manual Approval)
- stage: TerraformApply
  displayName: "Apply Infrastructure"
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
  - deployment: TerraformApply
    displayName: "Run Terraform Apply"
    environment: "ManualApproval"  # Define manual approval environment
    strategy:
      runOnce:
        deploy:
          steps:
          - download: tfplan
            artifact: tfplan
            displayName: "Download Plan Artifact"

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'  # Use the correct Azure subscription ID
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install Terraform
                curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
                sudo apt-get update && sudo apt-get install -y terraform

                # Initialize Terraform with backend configuration (reconfigure to change backend if needed)
                terraform init -reconfigure

                # Apply Terraform Plan only if changes were detected
                terraform apply -auto-approve tfplan
