trigger:
  branches:
    include:
      - dev  # Replace with your branch name

variables:
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'  # Your subscription ID
  RESOURCE_GROUP_NAME: "MyResourceGroup"
  STORAGE_ACCOUNT_NAME: "mystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "East US"
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"

stages:
  - stage: CreateResources
    displayName: "Create Azure Resources"
    jobs:
      - job: CreateAzureResources
        displayName: "Create Resource Group and Storage Account"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'  # The Azure subscription to use
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Authenticate using the Service Principal
                az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
                
                # Create Resource Group
                az group create --name $(RESOURCE_GROUP_NAME) --location $(LOCATION)
                
                # Create Storage Account
                az storage account create \
                  --name $(STORAGE_ACCOUNT_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --location $(LOCATION) \
                  --sku Standard_LRS
                
                # Create a container for Terraform state
                az storage container create \
                  --name $(CONTAINER_NAME) \
                  --account-name $(STORAGE_ACCOUNT_NAME)

  - stage: TerraformInit
    displayName: "Initialize Terraform"
    jobs:
      - job: TerraformInitJob
        displayName: "Terraform Init"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'  # The Azure subscription to use
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Authenticate using the Service Principal
                az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
                
                # Initialize Terraform
                terraform init -reconfigure  # Reconfigure the backend

  - stage: TerraformPlan
    displayName: "Plan Infrastructure"
    jobs:
      - job: TerraformPlanJob
        displayName: "Run Terraform Plan"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azure_subscription)'  # The Azure subscription to use
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Authenticate using the Service Principal
                az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
                
                # Run Terraform Plan
                terraform plan -out=tfplan

                # Upload the plan as an artifact
                echo "Uploading plan artifact..."
                echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]tfplan"

  - stage: TerraformApply
    displayName: "Apply Infrastructure"
    dependsOn: TerraformPlan
    condition: succeeded()
    jobs:
      - deployment: TerraformApplyJob
        displayName: "Run Terraform Apply"
        environment: "ManualApproval"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: tfplan
                  artifact: tfplan
                  displayName: "Download Plan Artifact"

                - task: AzureCLI@2
                  inputs:
                    azureSubscription: '$(azure_subscription)'  # The Azure subscription to use
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Authenticate using the Service Principal
                      az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)

                      # Apply the Terraform plan
                      terraform apply -auto-approve tfplan
