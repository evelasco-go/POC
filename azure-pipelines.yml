trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  aks_name: "goreg4-aks"
  resource_group_name: "Goreg4"
  log_analytics_workspace_name: "goreg4-analytics"
  diagnostic_setting_name: "goreg4-diagnostics"
  grafana_instance_name: "goreg4-grafana"
  azure_region: "East US"
  azure_monitor_workspace_name: "defaultazuremonitorworkspace-eus" # Managed Prometheus workspace name

stages:
# Terraform Stage (Commented Out)
# - stage: Terraform
#   displayName: 'Terraform Stage'
#   jobs:
#   - job: Terraform
#     displayName: 'Terraform Deployment'
#     steps:
#     - script: |
#         curl -LO https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh
#         chmod +x install_linux.sh && ./install_linux.sh
#         curl -sSL https://aka.ms/InstallAzureCLIDeb | sudo bash
#         
#         az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
#         az account set --subscription $(azure_subscription_id)
#       displayName: 'Azure CLI Login'
#     - script: |
#         terraform init
#       displayName: 'Terraform Init'
#     - script: |
#         terraform plan -out=tfplan
#       displayName: 'Terraform Plan'
#     - script: |
#         terraform apply -auto-approve
#       displayName: 'Terraform Apply'
#       env:
#         ARM_CLIENT_ID: $(azure_client_id)
#         ARM_CLIENT_SECRET: $(azure_client_secret)
#         ARM_TENANT_ID: $(azure_tenant_id)
#         ARM_SUBSCRIPTION_ID: $(azure_subscription_id)

- stage: EnableMonitoring
  displayName: 'Enable Monitoring Services'
  jobs:
  - job: SetupMonitoring
    displayName: 'Activate Monitoring Services'
    steps:
    - script: |
        # Login to Azure
        az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
        az account set --subscription $(azure_subscription_id)

        # Enable Container Logs Intelligence Pack
        echo "Enabling Container Logs..."
        az monitor log-analytics workspace pack enable \
          --resource-group $(resource_group_name) \
          --workspace-name $(log_analytics_workspace_name) \
          --name ContainerInsights

        # Enable Prometheus Metrics in Azure Monitor Workspace (Ensure Prometheus is available)
        echo "Enabling Prometheus metrics..."
        az monitor log-analytics workspace pack enable \
          --resource-group $(resource_group_name) \
          --workspace-name $(log_analytics_workspace_name) \
          --name Prometheus || echo "Prometheus pack not available"

        # Install Grafana extension if not installed
        echo "Installing Grafana extension..."
        az extension add --name grafana || az extension update --name grafana

        # Deploy Managed Grafana instance
        echo "Setting up Managed Grafana instance..."
        az grafana create \
          --name $(grafana_instance_name) \
          --resource-group $(resource_group_name) \
          --location $(azure_region) \
          --sku Standard \
          --enable-managed-identity

        # Set up Diagnostic Settings for AKS
        echo "Configuring Diagnostic Settings for AKS..."
        az monitor diagnostic-settings list \
          --resource "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)" | grep 'goreg4-diagnostics'

        if [ $? -eq 0 ]; then
          echo "Diagnostic settings already exist, updating..."
          az monitor diagnostic-settings update \
            --name "goreg4-diagnostics" \
            --resource "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)" \
            --workspace "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
            --metrics '[{"category": "AllMetrics", "enabled": true}]' \
            --logs '[{"category": "kube-apiserver", "enabled": true}, {"category": "kube-controller-manager", "enabled": true}]'
        else
          echo "No existing diagnostic settings, creating new ones..."
          az monitor diagnostic-settings create \
            --name "goreg4-diagnostics" \
            --resource "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)" \
            --workspace "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
            --metrics '[{"category": "AllMetrics", "enabled": true}]' \
            --logs '[{"category": "kube-apiserver", "enabled": true}, {"category": "kube-controller-manager", "enabled": true}]'
        fi

        echo "All monitoring services have been activated successfully."
      displayName: 'Activate Monitoring Services'
