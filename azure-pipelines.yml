trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  node_count: 2
  location: "East US"
  log_analytics_sku: "PerGB2018"
  terraformVersion: '1.3.5'

  resource_group_name: "Goreg4"
  storage_account_name: "goreg4"
  container_name: "goreg4container"
  aks_name: "goreg4-aks"
  log_analytics_workspace_name: "goreg4-analytics"
  diagnostic_setting_name: "goreg4-diagnostics"

stages:
#- stage: Terraform
#  displayName: 'Terraform Stage'
#  jobs:
#  - job: Terraform
#    displayName: 'Terraform Deployment'
#    steps:
#    - script: |
#        curl -LO https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh
#        chmod +x install_linux.sh && ./install_linux.sh
#        curl -sSL https://aka.ms/InstallAzureCLIDeb | sudo bash
#        
#        az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
#        az account set --subscription $(azure_subscription_id)
#      displayName: 'Azure CLI Login'
#    
#    - script: |
#        terraform init
#      displayName: 'Terraform Init'
#
#    - script: |
#        check_resource_exists() {
#          local resource_id="$1"
#          if az resource show --ids "$resource_id" >/dev/null 2>&1; then
#            echo "true"
#          else
#            echo "false"
#          fi
#        }
#
#        RESOURCE_GROUP_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)"
#        AKS_CLUSTER_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)"
#        STORAGE_ACCOUNT_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.Storage/storageAccounts/$(storage_account_name)"
#        STORAGE_CONTAINER_ID="https://$(storage_account_name).blob.core.windows.net/$(container_name)"
#        LOG_ANALYTICS_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)"
#        DIAGNOSTIC_SETTING_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)|$(diagnostic_setting_name)"
#
#        # Import or Create Resource Group
#        if [[ "$(check_resource_exists $RESOURCE_GROUP_ID)" == "true" ]]; then
#          terraform import azurerm_resource_group.example "$RESOURCE_GROUP_ID"
#        else
#          terraform apply -auto-approve -target=azurerm_resource_group.example
#        fi
#
#        # Import or Create AKS Cluster
#        if [[ "$(check_resource_exists $AKS_CLUSTER_ID)" == "true" ]]; then
#          terraform import azurerm_kubernetes_cluster.example "$AKS_CLUSTER_ID"
#        else
#          terraform apply -auto-approve -target=azurerm_kubernetes_cluster.example
#        fi
#
#        # Import or Create Storage Account
#        if [[ "$(check_resource_exists $STORAGE_ACCOUNT_ID)" == "true" ]]; then
#          terraform import azurerm_storage_account.example "$STORAGE_ACCOUNT_ID"
#        else
#          terraform apply -auto-approve -target=azurerm_storage_account.example
#        fi
#
#        # Import or Create Storage Container
#        if [[ "$(check_resource_exists $STORAGE_CONTAINER_ID)" == "true" ]]; then
#          terraform import azurerm_storage_container.example "$STORAGE_CONTAINER_ID"
#        else
#          terraform apply -auto-approve -target=azurerm_storage_container.example
#        fi
#
#        # Import or Create Log Analytics Workspace
#        if [[ "$(check_resource_exists $LOG_ANALYTICS_ID)" == "true" ]]; then
#          terraform import azurerm_log_analytics_workspace.example "$LOG_ANALYTICS_ID"
#        else
#          terraform apply -auto-approve -target=azurerm_log_analytics_workspace.example
#        fi
#
#        # Import or Create Diagnostic Setting
#        EXISTING_DIAGNOSTIC_SETTING=$(az monitor diagnostic-settings list --resource $(AKS_CLUSTER_ID) --query "[?name=='$(diagnostic_setting_name)'].name" -o tsv)
#
#        if [[ -z "$EXISTING_DIAGNOSTIC_SETTING" ]]; then
#          # If the diagnostic setting does not exist, create it
#          terraform apply -auto-approve -target=azurerm_monitor_diagnostic_setting.aks_metrics
#        else
#          echo "Diagnostic setting '$(diagnostic_setting_name)' already exists, skipping creation."
#        fi
#      displayName: 'Import or Create Resources Dynamically'
#
#    - script: |
#        terraform plan -out=tfplan
#      displayName: 'Terraform Plan'
#    
#    - script: |
#        terraform apply -auto-approve
#      displayName: 'Terraform Apply'
#      env:
#        ARM_CLIENT_ID: $(azure_client_id)
#        ARM_CLIENT_SECRET: $(azure_client_secret)
#        ARM_TENANT_ID: $(azure_tenant_id)
#        ARM_SUBSCRIPTION_ID: $(azure_subscription_id)

- stage: DeployMonitoring
  displayName: 'Deploy Monitoring Tools'
  dependsOn: []
  jobs:
  - job: HelmDeployment
    displayName: 'Deploy Prometheus and Grafana via Helm'
    steps:
    - script: |
        # Login to Azure
        az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
        az account set --subscription $(azure_subscription_id)

        # Get AKS credentials
        az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name)

        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

        # Add Helm charts for Prometheus, Grafana, and Azure Monitor
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo add azuremonitor https://azure.github.io/azure-monitor-openshift-prometheus-helm-charts/
        helm repo update

        # Enable Container Logs for AKS
        az monitor log-analytics workspace pack enable \
          --resource-group $(resource_group_name) \
          --workspace-name $(log_analytics_workspace_name) \
          --pack-name ContainerInsights

        # Enable Managed Prometheus metrics for Azure Monitor
        az monitor log-analytics workspace pack enable \
          --resource-group $(resource_group_name) \
          --workspace-name $(log_analytics_workspace_name) \
          --pack-name Prometheus

        # Enable Managed Grafana for Prometheus data visualization
        az monitor managed-grafana create \
          --resource-group $(resource_group_name) \
          --workspace-id "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
          --name "$(grafana_instance_name)" \
          --location "$(azure_region)" \
          --sku "Standard"

        # Install Azure Monitor Prometheus Agent
        helm install azure-prometheus azuremonitor/prometheus-aks \
          --namespace kube-system \
          --set azureMonitor.workspaceResourceId="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
          --set azureMonitor.prometheus.enabled=true \
          --set azureMonitor.prometheus.scrapeInterval=30s \
          --wait

        # Install Prometheus operator stack with Azure Monitor integration
        helm install prometheus prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
          --set prometheus.prometheusSpec.serviceMonitorSelector.matchLabels.azureMonitor=true \
          --wait

        # Install Grafana with service exposure and initial password setup
        helm install grafana grafana/grafana \
          --namespace monitoring \
          --set adminPassword='yourpassword' \
          --set service.type=LoadBalancer \
          --wait

        # Set up diagnostic settings for AKS to enable container insights and all relevant metrics
        az monitor diagnostic-settings create \
          --name "$(diagnostic_setting_name)" \
          --resource "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)" \
          --workspace "/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)" \
          --metrics '[{"category": "AllMetrics", "enabled": true}]'

        # Verify the status of the deployed pods
        kubectl get pods -n monitoring
      displayName: 'Install Prometheus, Grafana, and Configure Insights'
      env:
        KUBECONFIG: $(Build.SourcesDirectory)/.kube/config
