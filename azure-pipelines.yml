trigger:
  branches:
    include:
      - dev

variables:
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
  RESOURCE_GROUP_NAME: "POCMyResourceGroup"
  STORAGE_ACCOUNT_NAME: "pocmystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "eastus"
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'

stages:
  - stage: InstallTerraform
    displayName: "Install Terraform Version 1.10.4"
    jobs:
      - job: InstallTerraformJob
        displayName: "Install Terraform"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '1.10.4'

  - stage: TerraformInitAndPlan
    displayName: "Initialize and Plan Terraform"
    dependsOn: InstallTerraform
    jobs:
      - job: TerraformInitAndPlanJob
        displayName: "Terraform Init and Plan"
        steps:
          - script: |
              sudo chmod -R 777 /home/vsts/work/1/s/.git
            displayName: 'Fix Git Permissions'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)

                # Remove any previous lock file and terraform directory
                rm -f .terraform.lock.hcl
                rm -rf .terraform

                # Reinitialize terraform with upgrade flag to update modules and lockfile
                terraform init -upgrade -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                               -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                               -backend-config="container_name=$(CONTAINER_NAME)" \
                               -backend-config="key=terraform.tfstate"

                # Generate a new Terraform plan
                terraform plan -out=$(Pipeline.Workspace)/tfplan

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Pipeline.Workspace)
              ArtifactName: 'tfplan'
              publishLocation: 'Container'

  - stage: TerraformApply
    displayName: "Apply Terraform Plan"
    dependsOn: TerraformInitAndPlan
    condition: succeeded()
    jobs:
      - job: TerraformApplyJob
        displayName: "Apply Terraform"
        steps:
          - script: |
              sudo chmod -R 777 /home/vsts/work/1/s/.git
            displayName: 'Fix Git Permissions Before Apply'

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'tfplan'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                cd $(Pipeline.Workspace)
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)

                # Remove old lock files before applying the plan
                rm -f .terraform.lock.hcl

                # Reinitialize Terraform with the correct backend configuration and upgrade modules
                terraform init -upgrade -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                               -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                               -backend-config="container_name=$(CONTAINER_NAME)" \
                               -backend-config="key=terraform.tfstate"

                # Apply the generated plan
                terraform apply -auto-approve $(Pipeline.Workspace)/tfplan
