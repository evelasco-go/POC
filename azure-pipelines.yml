trigger:
  branches:
    include:
      - dev

variables:
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
  RESOURCE_GROUP_NAME: "POCMyResourceGroup"
  STORAGE_ACCOUNT_NAME: "pocmystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "eastus"
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'

stages:
  - stage: InstallTerraform
    displayName: "Install Terraform Version 1.10.4"
    jobs:
      - job: InstallTerraformJob
        displayName: "Install Terraform"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '1.10.4'

  - stage: TerraformInitPlanApply
    displayName: "Initialize, Plan, and Apply Terraform"
    dependsOn: InstallTerraform
    jobs:
      - job: TerraformInitPlanApplyJob
        displayName: "Terraform Init, Plan, and Apply"
        steps:
          - script: |
              sudo chmod -R 777 /home/vsts/work/1/s/.git
            displayName: 'Fix Git Permissions'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)

                cd $(Build.SourcesDirectory)

                # Remove old state and lock files
                rm -rf .terraform .terraform.lock.hcl terraform.plan

                # Initialize Terraform
                terraform init -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                               -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                               -backend-config="container_name=$(CONTAINER_NAME)" \
                               -backend-config="key=terraform.tfstate"

                # Import the existing storage container
                terraform import \
                  azurerm_storage_container.container \
                  "/subscriptions/$(AZURE_SUBSCRIPTION_ID)/resourceGroups/$(RESOURCE_GROUP_NAME)/providers/Microsoft.Storage/storageAccounts/$(STORAGE_ACCOUNT_NAME)/blobServices/default/containers/$(CONTAINER_NAME)" || echo "Container already imported."

                # Plan and apply Terraform
                terraform plan -out=terraform.plan -var="azure_subscription_id=$(AZURE_SUBSCRIPTION_ID)" \
                               -var="azure_client_id=$(AZURE_CLIENT_ID)" \
                               -var="azure_client_secret=$(AZURE_CLIENT_SECRET)" \
                               -var="azure_tenant_id=$(AZURE_TENANT_ID)" \
                               -var="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                               -var="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                               -var="container_name=$(CONTAINER_NAME)" \
                               -var="location=$(LOCATION)" \
                               -var="aks_name=$(AKS_NAME)" \
                               -var="node_count=$(NODE_COUNT)"

                terraform apply -auto-approve terraform.plan

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.SourcesDirectory)
              ArtifactName: 'terraform-plan'
              publishLocation: 'Container'
