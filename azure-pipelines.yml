stages:
- stage: Terraform
  displayName: 'Terraform Stage'
  jobs:
  - job: Terraform
    displayName: 'Terraform Deployment'
    steps:
    - script: |
        curl -LO https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh
        chmod +x install_linux.sh && ./install_linux.sh
        curl -sSL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
        az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
        az account set --subscription $(azure_subscription_id)
      displayName: 'Azure CLI Login'
    
    - script: |
        terraform init
      displayName: 'Terraform Init'

    - script: |
        check_resource_exists() {
          local resource_id="$1"
          if az resource show --ids "$resource_id" >/dev/null 2>&1; then
            echo "true"
          else
            echo "false"
          fi
        }

        RESOURCE_GROUP_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)"
        AKS_CLUSTER_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)"
        STORAGE_ACCOUNT_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.Storage/storageAccounts/$(storage_account_name)"
        STORAGE_CONTAINER_ID="https://$(storage_account_name).blob.core.windows.net/$(container_name)"
        LOG_ANALYTICS_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.OperationalInsights/workspaces/$(log_analytics_workspace_name)"
        DIAGNOSTIC_SETTING_ID="/subscriptions/$(azure_subscription_id)/resourceGroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name)|$(diagnostic_setting_name)"

        # Check if Resource Group exists and Import
        if [[ "$(check_resource_exists $RESOURCE_GROUP_ID)" == "true" ]]; then
          terraform import azurerm_resource_group.example "$RESOURCE_GROUP_ID"
        fi

        # Check if Storage Account exists and Import
        if [[ "$(check_resource_exists $STORAGE_ACCOUNT_ID)" == "true" ]]; then
          terraform import azurerm_storage_account.example "$STORAGE_ACCOUNT_ID"
        fi

        # Check if Storage Container exists and Import
        if [[ "$(check_resource_exists $STORAGE_CONTAINER_ID)" == "true" ]]; then
          terraform import azurerm_storage_container.example "$STORAGE_CONTAINER_ID"
        fi

        # Check if AKS Cluster exists and Import
        if [[ "$(check_resource_exists $AKS_CLUSTER_ID)" == "true" ]]; then
          terraform import azurerm_kubernetes_cluster.example "$AKS_CLUSTER_ID"
        fi

        # Check if Log Analytics Workspace exists and Import
        if [[ "$(check_resource_exists $LOG_ANALYTICS_ID)" == "true" ]]; then
          terraform import azurerm_log_analytics_workspace.example "$LOG_ANALYTICS_ID"
        fi

        # Check if Diagnostic Setting exists and Import
        EXISTING_DIAGNOSTIC_SETTING=$(az monitor diagnostic-settings list --resource $(AKS_CLUSTER_ID) --query "[?name=='$(diagnostic_setting_name)'].name" -o tsv)

        if [[ -n "$EXISTING_DIAGNOSTIC_SETTING" ]]; then
          terraform import azurerm_monitor_diagnostic_setting.example "$DIAGNOSTIC_SETTING_ID"
        fi
      displayName: 'Import Existing Resources'

    - script: |
        terraform plan -out=tfplan
      displayName: 'Terraform Plan'

    - script: |
        terraform apply -auto-approve
      displayName: 'Terraform Apply'
      env:
        ARM_CLIENT_ID: $(azure_client_id)
        ARM_CLIENT_SECRET: $(azure_client_secret)
        ARM_TENANT_ID: $(azure_tenant_id)
        ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
