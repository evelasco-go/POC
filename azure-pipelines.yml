trigger: none

variables:
  AZURE_CLIENT_ID: $(azure_client_id)  # Set these values in the Azure DevOps pipeline variables or environment
  AZURE_CLIENT_SECRET: $(azure_client_secret)
  AZURE_TENANT_ID: $(azure_tenant_id)
  AZURE_SUBSCRIPTION_ID: $(azure_subscription_id)
  RESOURCE_GROUP_NAME: "MyResourceGroup"
  STORAGE_ACCOUNT_NAME: "mystorageacct123"
  CONTAINER_NAME: "tfstate"
  AKS_NAME: "MyAKSCluster"
  LOCATION: "East US"
  NODE_COUNT: 2

stages:
  - stage: TerraformInit
    displayName: "Initialize Terraform"
    jobs:
      - job: TerraformInitJob
        displayName: "Terraform Init"
        steps:
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'

          - task: TerraformTaskV1@0
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'

  - stage: TerraformPlan
    displayName: "Plan Infrastructure"
    jobs:
      - job: TerraformPlanJob
        displayName: "Run Terraform Plan"
        steps:
          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceName: $(azure_subscription)  # Ensure this is set to the correct service connection

  - stage: TerraformApply
    displayName: "Apply Infrastructure"
    dependsOn: TerraformPlan
    condition: succeeded()
    jobs:
      - deployment: TerraformApplyJob
        displayName: "Run Terraform Apply"
        environment: "ManualApproval"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: TerraformTaskV1@0
                  displayName: 'Terraform Apply'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    environmentServiceName: $(azure_subscription)  # Ensure this is set to the correct service connection
