trigger:
  branches:
    include:
      - dev  # Replace with your branch name

variables:
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
  RESOURCE_GROUP_NAME: "POCMyResourceGroup"
  STORAGE_ACCOUNT_NAME: "pocmystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "eastus"  # Corrected location format
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"
  # Hardcoded values for debugging
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'

stages:
  - stage: CreateResources
    displayName: "Create Azure Resources"
    jobs:
      - job: CreateAzureResources
        displayName: "Create Resource Group and Storage Account"
        timeoutInMinutes: 30
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create Resource Group
                az group create --name $(RESOURCE_GROUP_NAME) --location $(LOCATION)

                # Create Storage Account
                az storage account create \
                  --name $(STORAGE_ACCOUNT_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --location $(LOCATION) \
                  --sku Standard_LRS

                # Create Storage Container
                az storage container create \
                  --name $(CONTAINER_NAME) \
                  --account-name $(STORAGE_ACCOUNT_NAME)

  - stage: TerraformInitAndPlan
    displayName: "Initialize and Plan Terraform"
    jobs:
      - job: TerraformInitAndPlanJob
        displayName: "Terraform Init and Plan"
        timeoutInMinutes: 30
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Set environment variables for Terraform
                export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
                export ARM_TENANT_ID=$(AZURE_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)

                # Initialize Terraform with backend config
                terraform init -reconfigure \
                  -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(CONTAINER_NAME)" \
                  -backend-config="key=terraform.tfstate"

                # Run Terraform Plan
                terraform plan -out=./tfplan

                # Ensure the tfplan file exists and upload it as an artifact
                if [ -f "./tfplan" ]; then
                  echo "Terraform plan file exists. Uploading..."
                  echo "##vso[artifact.upload containerfolder=tfplan;artifactname=tfplan]$(System.DefaultWorkingDirectory)/tfplan"
                else
                  echo "Terraform plan file does not exist. Exiting."
                  exit 1
                fi

  - stage: TerraformApply
    displayName: "Apply Infrastructure"
    dependsOn: TerraformInitAndPlan
    condition: succeeded()
    jobs:
      - job: TerraformApplyJob
        displayName: "Run Terraform Apply"
        timeoutInMinutes: 30
        steps:
          - download: tfplan
            artifact: tfplan

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Set Terraform debug environment variable to get detailed logs
                export TF_LOG=DEBUG
                export TF_LOG_PATH=terraform-debug.log

                # Apply the terraform plan file
                terraform apply -auto-approve tfplan || { echo "Terraform apply failed! Check the logs for more details"; exit 1; }

                # Check if the log file is created and display it
                if [ -f terraform-debug.log ]; then
                  cat terraform-debug.log
                else
                  echo "Terraform debug log not found!"
                  exit 1
                fi

                # Verify if apply was successful
                if [ $? -eq 0 ]; then
                  echo "Terraform apply succeeded!"
                else
                  echo "Terraform apply failed!"
                  exit 1
                fi