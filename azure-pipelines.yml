trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  terraformVersion: '1.3.5'
  location: "East US"
  node_count: 2
  log_analytics_sku: "PerGB2018"

  resource_group_name: "Goreg4"
  storage_account_name: "goreg4"
  container_name: "goreg4container"
  aks_name: "goreg4-aks"
  log_analytics_workspace_name: "goreg4-analytics"
  diagnostic_setting_name: "goreg4-diagnostics"
  grafana_name: "Goreg4-Grafana"

stages:

  - stage: DeployMonitoringStandalone
    displayName: 'Deploy Prometheus and Grafana without dependencies'
    jobs:
      - job: HelmDeployment
        displayName: 'Deploy Prometheus and Grafana via Helm'
        steps:
          - script: |
              # Log in to Azure
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              # Get AKS credentials
              az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name)

              # Verify cluster connection
              kubectl cluster-info

              # Install Helm
              curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

              # Add Helm repos
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo add grafana https://grafana.github.io/helm-charts
              helm repo update

              # Install Prometheus and Grafana
              helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace --wait
              helm install grafana grafana/grafana --namespace monitoring --set adminPassword='yourpassword' --set service.type=LoadBalancer --wait

              # Verify deployments
              kubectl get pods -n monitoring
            displayName: 'Install Prometheus and Grafana via Helm'

  - stage: EnableManagedPrometheusMetrics
    displayName: 'Enable Managed Prometheus Metrics'
    jobs:
      - job: EnablePrometheus
        displayName: 'Enable Managed Prometheus in AKS'
        steps:
          - script: |
              # Log in to Azure
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              # Get AKS credentials
              az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name)

              # Enable Azure Monitor for Containers (Managed Prometheus)
              az aks enable-addons --resource-group $(resource_group_name) --name $(aks_name) --addons monitoring

              # Verify that Prometheus is enabled
              kubectl get managedprometheus -n kube-system
            displayName: 'Enable Managed Prometheus Metrics'

  - stage: LinkGrafanaToPrometheus
    displayName: 'Link Azure Managed Grafana to Prometheus'
    jobs:
      - job: LinkGrafana
        displayName: 'Link Grafana to Managed Prometheus'
        steps:
          - script: |
              # Log in to Azure
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              # Enable Managed Grafana if not exists
              az grafana create --name $(grafana_name) --resource-group $(resource_group_name) --location $(location)

              # Link Grafana to Prometheus
              az grafana data-source create --name $(grafana_name) --resource-group $(resource_group_name) --type prometheus --url https://$(aks_name).prometheus.monitoring.azure.com --access proxy --is-default true

              # Verify link
              az grafana data-source list --name $(grafana_name) --resource-group $(resource_group_name)
            displayName: 'Configure Grafana Data Source'
