trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  location: "eastus"
  resource_group_name: "Goreg4"
  aks_name: "goreg4-aks"
  monitor_workspace: "defaultazuremonitorworkspace-eus"
  ingestion_url: "https://defaultazuremonitorworkspace-eastus-964j.eastus-1.metrics.ingest.monitor.azure.com/dataCollectionRules/dcr-57a879c781d44ab38afebcb72da1944e/streams/Microsoft-PrometheusMetrics/api/v1/write?api-version=2023-04-24"

stages:
  - stage: EnablePrometheus
    displayName: 'Enable Managed Prometheus'
    jobs:
      - job: EnablePrometheus
        steps:
          - script: |
              echo "ðŸ”‘ Logging into Azure..."
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              echo "ðŸ”„ Enabling Managed Prometheus..."
              az aks update --resource-group $(resource_group_name) --name $(aks_name) --enable-azure-monitor-metrics
              echo "âœ… Managed Prometheus enabled successfully!"

              echo "ðŸ”„ Checking if Data Collection Rule (DCR) exists..."
              DCR_ID=$(az monitor data-collection rule list --resource-group $(resource_group_name) --query "[?contains(name, 'prometheus-dcr')].id" -o tsv)

              if [ -z "$DCR_ID" ]; then
                echo "ðŸ”„ Creating new Data Collection Rule (DCR) for Prometheus..."
                DCR_ID=$(az monitor data-collection rule create \
                  --resource-group $(resource_group_name) \
                  --name prometheus-dcr \
                  --location $(location) \
                  --description "Prometheus Recording Rules for AKS Monitoring" \
                  --data-flows "destination:azure-monitor-metrics" \
                  --query "id" -o tsv)
                echo "âœ… Created DCR: $DCR_ID"
              else
                echo "âœ… DCR already exists: $DCR_ID"
              fi

              echo "ðŸ”„ Configuring Prometheus Recording Rules..."
              az rest --method patch --uri "https://management.azure.com$DCR_ID?api-version=2023-04-24" \
                --headers "Content-Type=application/json" \
                --body '{
                  "properties": {
                    "dataCollectionEndpoints": [
                      {
                        "streams": ["Microsoft-PrometheusMetrics"],
                        "destination": {
                          "type": "azure-monitor-metrics"
                        }
                      }
                    ],
                    "dataSources": {
                      "prometheusMetrics": [
                        {
                          "name": "recording_rules",
                          "enabled": true
                        }
                      ]
                    }
                  }
                }'

              echo "âœ… Managed Prometheus with Recording Rules enabled successfully!"
            displayName: 'Enable Prometheus & Recording Rules'

  - stage: DeployPrometheus
    displayName: 'Deploy Prometheus'
    jobs:
      - job: DeployPrometheus
        steps:
          - script: |
              echo "ðŸ”‘ Logging into Azure..."
              az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
              az account set --subscription $(azure_subscription_id)

              echo "ðŸ”„ Setting AKS context..."
              az aks get-credentials --resource-group $(resource_group_name) --name $(aks_name) --overwrite-existing

              echo "ðŸ”„ Deploying Prometheus..."
              kubectl create namespace monitoring || echo "Namespace already exists."

              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: prometheus
                namespace: monitoring
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: prometheus
                template:
                  metadata:
                    labels:
                      app: prometheus
                  spec:
                    containers:
                    - name: prometheus
                      image: mcr.microsoft.com/azuremonitor/containerinsights/ciprod/prometheus-remote-write/images:prom-remotewrite-20240617.1
                      env:
                      - name: INGESTION_URL
                        value: "$(ingestion_url)"
                      - name: MANAGED_IDENTITY_CLIENT_ID
                        value: "$(azure_client_id)"
                      - name: CLUSTER_NAME
                        value: "$(aks_name)"
              EOF

              echo "âœ… Prometheus deployed successfully!"
            displayName: 'Deploy Prometheus'
