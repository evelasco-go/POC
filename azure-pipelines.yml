trigger:
  branches:
    include:
      - dev

variables:
  azure_subscription: 'Software Development (15e60859-88d7-4c84-943f-55488479910c)'
  RESOURCE_GROUP_NAME: "POCMyResourceGroup"
  STORAGE_ACCOUNT_NAME: "pocmystorageacct123"
  CONTAINER_NAME: "tfstate"
  LOCATION: "eastus"
  NODE_COUNT: 2
  AKS_NAME: "MyAKSCluster"
  AZURE_CLIENT_ID: '9a7b7fdd-5a88-46e3-8d9b-b78042012e30'
  AZURE_TENANT_ID: 'fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282'
  AZURE_CLIENT_SECRET: 's6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0'
  AZURE_SUBSCRIPTION_ID: '15e60859-88d7-4c84-943f-55488479910c'

stages:
  - stage: InstallAndImport
    displayName: "Install Terraform and Import Resources"
    jobs:
      - job: TerraformImport
        displayName: "Install Terraform and Import AKS Cluster"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '1.9.8'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Login to Azure using Service Principal credentials
                az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)

                # Ensure Terraform backend is initialized properly
                terraform init -reconfigure \
                  -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(CONTAINER_NAME)" \
                  -backend-config="key=terraform.tfstate"

                # Remove the AKS cluster from Terraform state if it already exists
                terraform state rm azurerm_kubernetes_cluster.aks || true

                # Import the existing AKS cluster into Terraform
                terraform import azurerm_kubernetes_cluster.aks /subscriptions/$(AZURE_SUBSCRIPTION_ID)/resourceGroups/$(RESOURCE_GROUP_NAME)/providers/Microsoft.ContainerService/managedClusters/$(AKS_NAME)

  - stage: PlanAndApply
    displayName: "Plan and Apply Terraform"
    dependsOn: InstallAndImport
    jobs:
      - job: TerraformPlanApply
        displayName: "Terraform Plan and Apply"
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azure_subscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Ensure Terraform backend is initialized properly (again before planning/applying)
                terraform init -reconfigure \
                  -backend-config="resource_group_name=$(RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=$(CONTAINER_NAME)" \
                  -backend-config="key=terraform.tfstate"

                # Run terraform plan and output the plan file
                terraform plan -out=$(Build.ArtifactStagingDirectory)/tfplan

                # Apply the generated plan
                terraform apply -auto-approve $(Build.ArtifactStagingDirectory)/tfplan
