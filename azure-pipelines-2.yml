trigger:
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_subscription_id: "15e60859-88d7-4c84-943f-55488479910c"
  azure_client_id: "9a7b7fdd-5a88-46e3-8d9b-b78042012e30"
  azure_client_secret: "s6h8Q~WNY_QKu92SobDd7FnfSIWJsYSYmKeF2dw0"
  azure_tenant_id: "fd3a4a13-0cd8-4c1c-ba4c-e4995f5ee282"
  location: "eastus"
  resource_group_name: "Goreg4"
  app_insights_name: "Goreg4-AppInsights"
  log_analytics_workspace_name: "Goreg4-Logs"

stages:
- stage: SetupMonitoring
  displayName: 'Setup Application Insights Monitoring'
  jobs:
    - job: SetupResources
      displayName: 'Enable App Insights'
      steps:
        - script: |
            echo "üîë Logging into Azure..."
            az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
            az account set --subscription $(azure_subscription_id)
          displayName: 'Authenticate with Azure'

        - script: |
            echo "üîé Checking if Application Insights exists..."
            app_insights_id=$(az resource show \
              --resource-group $(resource_group_name) \
              --resource-type "Microsoft.Insights/components" \
              --name $(app_insights_name) \
              --query "id" -o tsv 2>/dev/null || echo "")

            if [ -z "$app_insights_id" ]; then
              echo "‚ö†Ô∏è Application Insights not found. Creating..."
              az monitor app-insights component create \
                --app $(app_insights_name) \
                --location $(location) \
                --resource-group $(resource_group_name) \
                --kind web \
                --application-type web
              echo "‚úÖ Application Insights created."
            else
              echo "‚úÖ Application Insights already exists."
            fi
          displayName: 'Create Application Insights if Missing'

- stage: FetchErrors
  displayName: 'Fetch All Errors from Logs'
  condition: always()
  dependsOn: SetupMonitoring
  jobs:
    - job: GetErrors
      displayName: 'Run KQL Queries to Fetch Errors'
      steps:
        - script: |
            echo "üîë Logging into Azure..."
            az login --service-principal -u $(azure_client_id) -p $(azure_client_secret) --tenant $(azure_tenant_id)
            az account set --subscription $(azure_subscription_id)

            echo "üîé Getting Workspace ID..."
            workspace_id=$(az monitor log-analytics workspace show \
              --resource-group $(resource_group_name) \
              --workspace-name $(log_analytics_workspace_name) \
              --query customerId -o tsv 2>/dev/null)

            if [[ -z "$workspace_id" ]]; then
              echo "‚ùå Log Analytics Workspace not found. Creating..."
              az monitor log-analytics workspace create \
                --resource-group $(resource_group_name) \
                --workspace-name $(log_analytics_workspace_name) \
                --location $(location)

              workspace_id=$(az monitor log-analytics workspace show \
                --resource-group $(resource_group_name) \
                --workspace-name $(log_analytics_workspace_name) \
                --query customerId -o tsv)

              if [[ -z "$workspace_id" ]]; then
                echo "‚ùå Failed to get Log Analytics Workspace ID. Exiting..."
                exit 1
              fi
            fi

            echo "‚úÖ Found Log Analytics Workspace ID: $workspace_id"

            echo "üîé Checking available tables..."
            az monitor log-analytics query \
              --workspace "$workspace_id" \
              --analytics-query "print schema()" \
              --output table

            echo "üîé Fetching all errors from Azure Monitor..."
            az monitor log-analytics query \
              --workspace "$workspace_id" \
              --analytics-query "
              let logs = dynamic(['AzureDiagnostics', 'AppTraces', 'AppRequests', 'AppExceptions']);
              union isfuzzy=true withsource=TableName logs
              | where tostring(severityLevel) == 'Error' or tostring(Level) == 'Error'
              | project TimeGenerated, TableName, Message, Category, _ResourceId
              | order by TimeGenerated desc" \
              --output table

            echo "üîé Fetching all errors from Kubernetes Logs..."
            az monitor log-analytics query \
              --workspace "$workspace_id" \
              --analytics-query "
              let kubeLogs = dynamic(['ContainerLog', 'KubeEvents']);
              union isfuzzy=true withsource=TableName kubeLogs
              | where LogMessage contains 'error' or LogLevel == 'Error'
              | project TimeGenerated, TableName, Namespace, LogMessage
              | order by TimeGenerated desc" \
              --output table
          displayName: 'Run KQL Queries for Errors'
